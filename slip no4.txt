slip no4
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency list.
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int vertex;
    struct node* next;
} Node;

Node* createNode(int v)
{
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

void addEdge(Node** adjList, int src, int dest)
{
    
    Node* newNode = createNode(dest);
    newNode->next = adjList[src];
    adjList[src] = newNode;

    
    newNode = createNode(src);
    newNode->next = adjList[dest];
    adjList[dest] = newNode;
}

void printGraph(Node** adjList, int vertices)
{
    int i;
    for (i = 0; i < vertices; i++)
    {
        printf("Vertex %d: ", i+1);
        Node* temp = adjList[i];
        while (temp)
        {
            printf("%d -> ", temp->vertex+1);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main()
{
    int vertices, edges, i;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    
    Node** adjList = malloc(vertices * sizeof(Node*));
    for (i = 0; i < vertices; i++)
    {
        adjList[i] = NULL;
    }

    
    for (i = 0; i < edges; i++)
    {
        int src, dest;
        printf("Enter edge %d (source, destination): ", i+1);
        scanf("%d %d", &src, &dest);
        addEdge(adjList, src-1, dest-1);
    }

    
    printf("Adjacency list representation of the graph:\n");
    printGraph(adjList, vertices);

    return 0;
}
Q 2. Write a C program for the implementation of Topological sorting. 

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct node
{
    int vertex;
    struct node* next;
} Node;

Node* createNode(int v)
{
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

void addEdge(Node** adjList, int src, int dest)
{
    Node* newNode = createNode(dest);
    newNode->next = adjList[src];
    adjList[src] = newNode;
}

void topologicalSortUtil(Node** adjList, int vertex, int visited[], int* stack)
{
    visited[vertex] = 1;

    Node* temp = adjList[vertex];
    while (temp)
    {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex])
        {
            topologicalSortUtil(adjList, adjVertex, visited, stack);
        }
        temp = temp->next;
    }

    stack[--(*stack)] = vertex;
}

void topologicalSort(Node** adjList, int vertices)
{
    int visited[MAX_VERTICES] = {0};
    int stack[MAX_VERTICES];
    int i, j;

    for (i = 0; i < vertices; i++)
    {
        if (!visited[i])
        {
            topologicalSortUtil(adjList, i, visited, &stack[vertices]);
        }
    }

    printf("Topological sort: ");
    for (i = 0; i < vertices; i++)
    {
        printf("%d ", stack[i]+1);
    }
    printf("\n");
}

int main()
{
    int vertices, edges, i;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    Node** adjList = malloc(vertices * sizeof(Node*));
    for (i = 0; i < vertices; i++)
    {
        adjList[i] = NULL;
    }

    for (i = 0; i < edges; i++)
    {
        int src, dest;
        printf("Enter edge %d (source, destination): ", i+1);
        scanf("%d %d", &src, &dest);
        addEdge(adjList, src-1, dest-1);
    }

    topologicalSort(adjList, vertices);

    return 0;
}

