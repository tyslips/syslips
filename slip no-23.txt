slip no:-23
Q 1. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

int num_vertices;

int find_min_key(int key[], int mst_set[]) {
    int min_key = INT_MAX, min_index, i;
    for (i = 0; i < num_vertices; i++) {
        if (mst_set[i] == 0 && key[i] < min_key) {
            min_key = key[i];
            min_index = i;
        }
    }
    return min_index;
}

void prim(int graph[MAX_VERTICES][MAX_VERTICES]) {
    int parent[MAX_VERTICES], key[MAX_VERTICES], mst_set[MAX_VERTICES];
    int i, j;

    
    for (i = 0; i < num_vertices; i++) {
        key[i] = INT_MAX;
        mst_set[i] = 0;
    }

    // start with vertex 0
    key[0] = 0;
    parent[0] = -1;

    for (i = 0; i < num_vertices - 1; i++) {
        int u = find_min_key(key, mst_set);
        mst_set[u] = 1;

        for (j = 0; j < num_vertices; j++) {
            if (graph[u][j] && !mst_set[j] && graph[u][j] < key[j]) {
                parent[j] = u;
                key[j] = graph[u][j];
            }
        }
    }

    
    printf("Edge \tWeight\n");
    for (i = 1; i < num_vertices; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES], i, j;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    prim(graph);

    return 0;
}
output:-
Enter the number of vertices in the graph: 5
Enter the adjacency matrix:
0 2 0 6 0
2 0 3 8 5
0 3 0 0 7
6 8 0 0 9
0 5 7 9 0
Edge    Weight
0 - 1  2 
1 - 2  3 
0 - 3  6 
1 - 4  5 

Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an 
 adjacency matrix. Display the adjacency matrix. 
#include <stdio.h>

#define MAX_VERTICES 100

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES], num_vertices, i, j;

    
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

   
    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    
    printf("Adjacency matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

    return 0;
}
output:-
Enter the number of vertices in the graph: 4
Enter the adjacency matrix:
0 1 1 0
1 0 0 1
1 0 0 1
0 1 1 0
Adjacency matrix:
0 1 1 0 
1 0 0 1 
1 0 0 1 
0 1 1 0 

