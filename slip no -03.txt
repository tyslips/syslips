slip no -03
Q 1. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.
#include <stdio.h>
#include <limits.h>

#define V 5 // Number of vertices in the graph

int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, min_index;
  
    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;
  
    return min_index;
}

void printMST(int parent[], int graph[V][V]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[V][V]) {
    int parent[V];
    int key[V];
    bool mstSet[V];
  
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;
  
    key[0] = 0;
    parent[0] = -1;
  
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = true;
  
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }
  
    printMST(parent, graph);
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
  
    primMST(graph);
  
    return 0;
}

Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an 
 adjacency matrix. Display the adjacency matrix.

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

int main()
{
    int vertices, edges, i, j;
    int adj_matrix[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Initialize the adjacency matrix with all zeros
    for(i = 0; i < vertices; i++)
    {
        for(j = 0; j < vertices; j++)
        {
            adj_matrix[i][j] = 0;
        }
    }

    
    for(i = 0; i < edges; i++)
    {
        int u, v;
        printf("Enter edge %d: ", i+1);
        scanf("%d%d", &u, &v);
        adj_matrix[u-1][v-1] = 1;
        adj_matrix[v-1][u-1] = 1;
    }

    
    printf("\nAdjacency Matrix:\n");
    for(i = 0; i < vertices; i++)
    {
        for(j = 0; j < vertices; j++)
        {
            printf("%d ", adj_matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}
