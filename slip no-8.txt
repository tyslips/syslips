slip no-:8
Q 1. Write a program to sort n randomly generated elements using Heapsort method.

#include <stdio.h>
#include <stdlib.h>

// function to swap two elements in an array
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// function to heapify a subtree with root at given index in an array
void heapify(int arr[], int n, int i) {
    int largest = i;    // initialize largest as root
    int l = 2 * i + 1;  // left child index
    int r = 2 * i + 2;  // right child index

    // if left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;

    // if right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r;

    // if largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// function to perform heapsort on an array
void heapsort(int arr[], int n) {
    // build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // extract elements from heap one by one
    for (int i = n - 1; i > 0; i--) {
        // move current root to end
        swap(&arr[0], &arr[i]);

        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

int main() {
    int n;

    printf("Enter the number of elements to sort: ");
    scanf("%d", &n);

    // dynamically allocate memory for the array
    int *arr = (int*)malloc(n * sizeof(int));

    // generate n random elements and store in the array
    printf("Generating %d random elements...\n", n);
    for (int i = 0; i < n; i++)
        arr[i] = rand() % 100;

    printf("Original array:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);

    // sort the array using heapsort
    heapsort(arr, n);

    printf("\nSorted array:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);

    // free the dynamically allocated memory
    free(arr);

    return 0;
}

Q 2. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 5  // number of vertices in the graph

// function to find the vertex with minimum key value
int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

// function to print the constructed MST
void printMST(int parent[], int graph[V][V]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

// function to construct and print the MST using Prim's algorithm
void primMST(int graph[V][V]) {
    int parent[V];     // array to store the constructed MST
    int key[V];        // key values used to pick minimum weight edge
    int mstSet[V];     // set of vertices included in MST

    // initialize all keys as INFINITE and mstSet[] as false
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // always include first vertex in MST
    key[0] = 0;
    parent[0] = -1;

    // construct MST for V-1 vertices
    for (int count = 0; count < V - 1; count++) {
        // pick the minimum key vertex from the set of vertices not yet included in MST
        int u = minKey(key, mstSet);

        // add the picked vertex to the MST set
        mstSet[u] = 1;

        // update key values and parent index of adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // print the constructed MST
    printMST(parent, graph);
}

int main() {
    // adjacency matrix representation of the graph
    int graph[V][V] = {{0, 2, 0, 6, 0},
                       {2, 0, 3, 8, 5},
                       {0, 3, 0, 0, 7},
                       {6, 8, 0, 0, 9},
                       {0, 5, 7, 9, 0}};

    // construct and print the MST using Prim's algorithm
    primMST(graph);

    return 0;
}
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an adjacency
matrix. Implement functions to print indegree of all vertices of graph. 

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// structure to represent a graph
typedef struct {
    int matrix[MAX_VERTICES][MAX_VERTICES];
    int num_vertices;
} Graph;

// function to create a new graph with n vertices
Graph createGraph(int n) {
    Graph g;
    g.num_vertices = n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            g.matrix[i][j] = 0;
        }
    }
    return g;
}

// function to add an edge to the graph
void addEdge(Graph* g, int from, int to) {
    g->matrix[from][to] = 1;
}

// function to print the adjacency matrix of the graph
void printGraph(Graph g) {
    printf("Adjacency matrix:\n");
    for (int i = 0; i < g.num_vertices; i++) {
        for (int j = 0; j < g.num_vertices; j++) {
            printf("%d ", g.matrix[i][j]);
        }
        printf("\n");
    }
}

// function to print the indegree of all vertices in the graph
void printIndegree(Graph g) {
    int indegree[MAX_VERTICES] = {0};

    // calculate indegree of each vertex
    for (int i = 0; i < g.num_vertices; i++) {
        for (int j = 0; j < g.num_vertices; j++) {
            if (g.matrix[j][i] == 1) {
                indegree[i]++;
            }
        }
    }

    // print the indegree of each vertex
    printf("Indegree of vertices:\n");
    for (int i = 0; i < g.num_vertices; i++) {
        printf("%d: %d\n", i, indegree[i]);
    }
}

int main() {
    // create a new graph with 6 vertices
    Graph g = createGraph(6);

    // add edges to the graph
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 3);
    addEdge(&g, 1, 2);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 5);
    addEdge(&g, 3, 1);
    addEdge(&g, 4, 2);
    addEdge(&g, 4, 3);
    addEdge(&g, 5, 4);

    // print the adjacency matrix and indegree of vertices
    printGraph(g);
    printIndegree(g);

    return 0;
}


