slip no:-13
Q 1. Write a C program for the Implementation of Kruskalâ€™s Minimum spanning tree algorithm.
#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100
#define MAX_VERTICES 100

typedef struct {
    int u;
    int v;
    int w;
} Edge;

typedef struct {
    int parent;
    int rank;
} Subset;

Edge edgeList[MAX_EDGES];
Subset subsets[MAX_VERTICES];
int numVertices, numEdges;

int find(int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets[i].parent);
    }
    return subsets[i].parent;
}

void Union(int x, int y) {
    int xroot = find(x);
    int yroot = find(y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    }
    else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    }
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

void kruskalMST() {
    Edge result[numVertices];
    int i, e, count = 0;

    for (i = 0; i < numVertices; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    for (e = 0; e < numEdges; e++) {
        int x = find(edgeList[e].u);
        int y = find(edgeList[e].v);

        if (x != y) {
            result[count++] = edgeList[e];
            Union(x, y);
        }
    }

    printf("Minimum Spanning Tree:\n");
    for (i = 0; i < count; i++) {
        printf("(%d, %d) -> %d\n", result[i].u, result[i].v, result[i].w);
    }
}

int main() {
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    printf("Enter the edges (u, v, w):\n");
    int i;
    for (i = 0; i < numEdges; i++) {
        scanf("%d %d %d", &edgeList[i].u, &edgeList[i].v, &edgeList[i].w);
    }

    kruskalMST();

    return 0;
}
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Breadth First Search (BFS)
traversal.
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

int adjMatrix[MAX_VERTICES][MAX_VERTICES];
int visited[MAX_VERTICES];

void bfsTraversal(int startVertex, int numVertices) {
    int queue[MAX_VERTICES], front = -1, rear = -1;
    int i, v;

    visited[startVertex] = 1;
    queue[++rear] = startVertex;

    while (front != rear) {
        v = queue[++front];

        printf("%d ", v);

        for (i = 0; i < numVertices; i++) {
            if (adjMatrix[v][i] && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
}

int main() {
    int numVertices, numEdges, i, j, v1, v2;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    for (i = 0; i < numVertices; i++) {
        for (j = 0; j < numVertices; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    printf("Enter the edges (vertex1 vertex2):\n");
    for (i = 0; i < numEdges; i++) {
        scanf("%d %d", &v1, &v2);
        adjMatrix[v1][v2] = 1;
        adjMatrix[v2][v1] = 1;
    }

    printf("Adjacency Matrix:\n");
    for (i = 0; i < numVertices; i++) {
        for (j = 0; j < numVertices; j++) {
            printf("%d ", adjMatrix[i][j]);
        }
        printf("\n");
    }

    printf("BFS Traversal: ");
    for (i = 0; i < numVertices; i++) {
        visited[i] = 0;
    }
    bfsTraversal(0, numVertices);

    return 0;
}
