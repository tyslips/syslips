slip no:-24
Q 1. Write a program to sort n randomly generated elements using Heap sort method.

#include <stdio.h>
#include <stdlib.h>

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heap_sort(int arr[], int n) {
    int i;
    for (i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

int main() {
    int n, i;
    printf("Enter the number of elements to be sorted: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    heap_sort(arr, n);

    printf("Sorted array:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
Enter the number of elements to be sorted: 6
Enter 6 elements:
9 7 5 3 1 2
Sorted array:
1 2 3 5 7 9

Q 2. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

int num_vertices;

int find_min_key(int key[], int mst_set[]) {
    int min_key = INT_MAX, min_index, i;
    for (i = 0; i < num_vertices; i++) {
        if (mst_set[i] == 0 && key[i] < min_key) {
            min_key = key[i];
            min_index = i;
        }
    }
    return min_index;
}

void prim(int graph[MAX_VERTICES][MAX_VERTICES]) {
    int parent[MAX_VERTICES], key[MAX_VERTICES], mst_set[MAX_VERTICES];
    int i, j;

    
    for (i = 0; i < num_vertices; i++) {
        key[i] = INT_MAX;
        mst_set[i] = 0;
    }

    // start with vertex 0
    key[0] = 0;
    parent[0] = -1;

    for (i = 0; i < num_vertices - 1; i++) {
        int u = find_min_key(key, mst_set);
        mst_set[u] = 1;

        for (j = 0; j < num_vertices; j++) {
            if (graph[u][j] && !mst_set[j] && graph[u][j] < key[j]) {
                parent[j] = u;
                key[j] = graph[u][j];
            }
        }
    }

   
    printf("Edge \tWeight\n");
    for (i = 1; i < num_vertices; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES], i, j;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    prim(graph);

    return 0;
}
Enter the number of vertices in the graph: 5
Enter the adjacency matrix:
0 2 0 6 0
2 0 3 8 5
0 3 0 0 7
6 8 0 0 9
0 5 7 9 0
Edge    Weight
0 - 1  2 
1 - 2  3 
0 - 3  6 
1 - 4  5 


