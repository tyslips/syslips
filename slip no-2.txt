slip no-2
Q1. Write a C program for the implementation of Topological sorting.

#include<stdio.h>
#include<stdlib.h>
#define MAX 100

int adj[MAX][MAX], visited[MAX], sorted[MAX], n, top=-1;

void dfs(int v) {
    visited[v] = 1;
    for(int i=0;i<n;i++) {
        if(adj[v][i] && !visited[i])
            dfs(i);
    }
    sorted[++top] = v;
}

void topological_sort() {
    for(int i=0;i<n;i++) {
        visited[i] = 0;
    }
    for(int i=0;i<n;i++) {
        if(!visited[i])
            dfs(i);
    }
    printf("\nTopologically sorted order: ");
    for(int i=top;i>=0;i--) {
        printf("%d ", sorted[i]);
    }
}

int main() {
    int e, origin, dest;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);
    for(int i=0;i<e;i++) {
        printf("Enter origin and destination vertex of edge %d: ", i+1);
        scanf("%d %d", &origin, &dest);
        adj[origin][dest] = 1;
    }
    printf("Adjacency Matrix:\n");
    for(int i=0;i<n;i++) {
        for(int j=0;j<n;j++) {
            printf("%d ", adj[i][j]);
        }
        printf("\n");
    }
    topological_sort();
    return 0;
}

output:-
Enter number of vertices: 6
Enter number of edges: 6
Enter origin and destination vertex of edge 1: 5 2
Enter origin and destination vertex of edge 2: 5 0
Enter origin and destination vertex of edge 3: 4 0
Enter origin and destination vertex of edge 4: 4 1
Enter origin and destination vertex of edge 5: 2 3
Enter origin and destination vertex of edge 6: 3 1
Adjacency Matrix:
0 0 1 0 0 0 
1 0 0 0 0 0 
0 0 0 1 0 0 
0 1 0 0 0 0 
1 0 1 0 0 0 
1 0 0 0 1 0 

Topologically sorted order: 5 4 2 3 1 0 

Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an
adjacency matrix. Display the adjacency matrix.
#include<stdio.h>

#define MAX_VERTICES 100

int main() {
    int vertices, edges, i, j, v1, v2;
    int adjacency_matrix[MAX_VERTICES][MAX_VERTICES] = {0};

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for(i = 0; i < edges; i++) {
        printf("Enter edge %d (v1 v2): ", i+1);
        scanf("%d %d", &v1, &v2);

        adjacency_matrix[v1-1][v2-1] = 1;
        adjacency_matrix[v2-1][v1-1] = 1;
    }

    printf("\nThe adjacency matrix for the given graph is:\n");

    for(i = 0; i < vertices; i++) {
        for(j = 0; j < vertices; j++) {
            printf("%d ", adjacency_matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}

output:
Enter the number of vertices: 4
Enter the number of edges: 5
Enter edge 1 (v1 v2): 1 2
Enter edge 2 (v1 v2): 1 3
Enter edge 3 (v1 v2): 2 3
Enter edge 4 (v1 v2): 2 4
Enter edge 5 (v1 v2): 3 4

The adjacency matrix for the given graph is:
0 1 1 0 
1 0 1 1 
1 1 0 1 
0 1 1 0 
