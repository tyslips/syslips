slip no:-21

Q 1. Write a C program for the implementation of Dijkstra’s shortest path algorithm for 
findingshortest path from a given source vertex using adjacency cost matrix.

#include <stdio.h>
#include <limits.h>

// Number of vertices in the graph
#define V 5

// Function to find the vertex with minimum distance value
int minDistance(int dist[], int visited[])
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (visited[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// Function to print the final shortest distance from source to all vertices
void printSolution(int dist[])
{
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Function to implement Dijkstra's shortest path algorithm for adjacency matrix representation of graph
void dijkstra(int graph[V][V], int src)
{
    int dist[V];    // Array to store the shortest distance from source to ith vertex
    int visited[V]; // Array to keep track of vertices visited

    // Initialize all distances as INFINITE and visited as 0
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, visited[i] = 0;

    // Distance from source vertex to itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet visited
        int u = minDistance(dist, visited);

        // Mark the picked vertex as visited
        visited[u] = 1;

        // Update dist[v] only if it's not already visited, there is an edge from u to v, and the total weight of path from source to v through u is smaller than current value of dist[v]
        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    // Print the final shortest distance from source to all vertices
    printSolution(dist);
}

// Driver program to test above function
int main()
{
    int graph[V][V] = { { 0, 4, 0, 0, 2 },
                        { 4, 0, 1, 0, 0 },
                        { 0, 1, 0, 3, 0 },
                        { 0, 0, 3, 0, 1 },
                        { 2, 0, 0, 1, 0 } };

    dijkstra(graph, 0); // Finding shortest path from source vertex 0

    return 0;
}

Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 1000

// Function to find minimum key value in the array of key values
int minKey(int key[], int mstSet[], int vertices) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < vertices; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the minimum spanning tree
void printMST(int parent[], int graph[MAX_VERTICES][MAX_VERTICES], int vertices) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < vertices; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

// Function to find minimum spanning tree using Prim's algorithm
void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int vertices) {
    int parent[vertices]; // Array to store the constructed MST
    int key[vertices]; // Key values used to pick minimum weight edge in cut
    int mstSet[vertices]; // To represent set of vertices not yet included in MST

    // Initialize all keys as INFINITE and mstSet[] as 0
    for (int i = 0; i < vertices; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // Always include first  vertex in MST
    key[0] = 0; // Make key 0 so that this vertex is picked as first vertex
    parent[0] = -1; // First node is always root of MST

    // The MST will have vertices-1 edges
    for (int count = 0; count < vertices - 1; count++) {
        int u = minKey(key, mstSet, vertices); // Pick the minimum key vertex from the set of vertices not yet included in MST
        mstSet[u] = 1; // Add the picked vertex to the MST Set

        // Update key value and parent index of the adjacent vertices of the picked vertex.
        for (int v = 0; v < vertices; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST
    printMST(parent, graph, vertices);
}

// Driver program to test above functions
int main() {
    int vertices, edges;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &edges);

    int graph[MAX_VERTICES][MAX_VERTICES] = {0};

    printf("Enter the edges and their weights:\n");
    for (int i = 0; i < edges; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;
        graph[v][u] = w;
    }

    primMST(graph, vertices);

    return 0;
}

