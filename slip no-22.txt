slip no-22
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency 
list and display the adjacency list. 
#include <stdio.h>
#include <stdlib.h>

struct node {
    int vertex;
    struct node* next;
};

struct graph {
    int num_vertices;
    struct node** adj_list;
};

struct node* create_node(int v) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->vertex = v;
    new_node->next = NULL;
    return new_node;
}

struct graph* create_graph(int vertices) {
    struct graph* graph = (struct graph*)malloc(sizeof(struct graph));
    graph->num_vertices = vertices;

    graph->adj_list = (struct node**)malloc(vertices * sizeof(struct node*));

    int i;
    for (i = 0; i < vertices; i++) {
        graph->adj_list[i] = NULL;
    }

    return graph;
}

void add_edge(struct graph* graph, int src, int dest) {
    struct node* new_node = create_node(dest);
    new_node->next = graph->adj_list[src];
    graph->adj_list[src] = new_node;

    new_node = create_node(src);
    new_node->next = graph->adj_list[dest];
    graph->adj_list[dest] = new_node;
}

void print_graph(struct graph* graph) {
    int v;
    for (v = 0; v < graph->num_vertices; v++) {
        struct node* temp = graph->adj_list[v];
        printf("\n Adjacency list of vertex %d\n head ", v);
        while (temp) {
            printf("-> %d ", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    int vertices, edges, i;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);

    struct graph* graph = create_graph(vertices);

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &edges);

    for (i = 0; i < edges; i++) {
        int src, dest;
        printf("\nEnter edge %d (source and destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        add_edge(graph, src, dest);
    }

    print_graph(graph);

    return 0;
}

output:-

Enter the number of vertices in the graph: 5
Enter the number of edges in the graph: 6

Enter edge 1 (source and destination): 0 1

Enter edge 2 (source and destination): 0 4

Enter edge 3 (source and destination): 1 2

Enter edge 4 (source and destination): 1 3

Enter edge 5 (source and destination): 1 4

Enter edge 6 (source and destination): 2 3

 Adjacency list of vertex 0
 head -> 1 -> 4

 Adjacency list of vertex 1
 head -> 0 -> 2 -> 3 -> 4

 Adjacency list of vertex 2
 head -> 1 -> 3

 Adjacency list of vertex 3
 head -> 1 -> 2

 Adjacency list of vertex 4
 head -> 0 -> 1
oR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal. 
#include <stdio.h>
#include <stdlib.h>

void dfs(int vertex, int** graph, int* visited, int num_vertices) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    int i;
    for (i = 0; i < num_vertices; i++) {
        if (graph[vertex][i] == 1 && !visited[i]) {
            dfs(i, graph, visited, num_vertices);
        }
    }
}

int main() {
    int num_vertices, num_edges, i, j;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &num_edges);

    
    int** graph = (int**)malloc(num_vertices * sizeof(int*));
    for (i = 0; i < num_vertices; i++) {
        graph[i] = (int*)malloc(num_vertices * sizeof(int));
        for (j = 0; j < num_vertices; j++) {
            graph[i][j] = 0;
        }
    }

   
    for (i = 0; i < num_edges; i++) {
        int src, dest;
        printf("\nEnter edge %d (source and destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        graph[src][dest] = 1;
        graph[dest][src] = 1;  // since it is an undirected graph
    }

    
    printf("\nAdjacency Matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

   
    int* visited = (int*)malloc(num_vertices * sizeof(int));
    for (i = 0; i < num_vertices; i++) {
        visited[i] = 0;
    }

    printf("\nDepth First Search (DFS) Traversal: ");
    for (i = 0; i < num_vertices; i++) {
        if (!visited[i]) {
            dfs(i, graph, visited, num_vertices);
        }
    }

   
    for (i = 0; i < num_vertices; i++) {
        free(graph[i]);
    }
    free(graph);
    free(visited);

    return 0;
}
output:-
Enter the number of vertices in the graph: 5
Enter the number of edges in the graph: 6

Enter edge 1 (source and destination): 0 1

Enter edge 2 (source and destination): 0 4

Enter edge 3 (source and destination): 1 2

Enter edge 4 (source and destination): 1 3

Enter edge 5 (source and destination): 1 4

Enter edge 6 (source and destination): 2 3

Adjacency Matrix:
0 1 0 0 1 
1 0 1 1 1 
0 1 0 1 0 
0 1 1 0 0 
1 1 0 0 0 

Depth First Search
