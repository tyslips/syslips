slip no:-18
Q 1. Write aCprogramthat acceptsthe vertices and edges of a graph and storesit as an adjacency
matrix. Display the adjacency matrix

#include <stdio.h>

#define MAX_VERTICES 100

int main() {
    int adj_matrix[MAX_VERTICES][MAX_VERTICES];
    int num_vertices, num_edges;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &num_edges);

    // Initialize adjacency matrix to all zeroes
    for (int i = 0; i < num_vertices; i++) {
        for (int j = 0; j < num_vertices; j++) {
            adj_matrix[i][j] = 0;
        }
    }

    // Prompt the user to enter edges and store them in the adjacency matrix
    for (int i = 0; i < num_edges; i++) {
        int u, v;
        printf("Enter edge %d (format: u v): ", i + 1);
        scanf("%d %d", &u, &v);
        adj_matrix[u][v] = 1;
        adj_matrix[v][u] = 1; // Uncomment this line if the graph is undirected
    }

    // Display the adjacency matrix
    printf("Adjacency matrix:\n");
    for (int i = 0; i < num_vertices; i++) {
        for (int j = 0; j < num_vertices; j++) {
            printf("%d ", adj_matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}

OR
Q 2. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.

#include <stdio.h>
#include <limits.h>

#define V 5

int minKey(int key[], int mstSet[]) {
   int min = INT_MAX, min_index;
   
   for (int v = 0; v < V; v++) {
      if (mstSet[v] == 0 && key[v] < min) {
         min = key[v];
         min_index = v;
      }
   }
   
   return min_index;
}

void printMST(int parent[], int graph[V][V]) {
   printf("Edge \tWeight\n");
   
   for (int i = 1; i < V; i++) {
      printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
   }
}

void primMST(int graph[V][V]) {
   int parent[V];
   int key[V];
   int mstSet[V];
   
   for (int i = 0; i < V; i++) {
      key[i] = INT_MAX;
      mstSet[i] = 0;
   }
   
   key[0] = 0;
   parent[0] = -1;
   
   for (int count = 0; count < V - 1; count++) {
      int u = minKey(key, mstSet);
      mstSet[u] = 1;
      
      for (int v = 0; v < V; v++) {
         if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
            parent[v] = u;
            key[v] = graph[u][v];
         }
      }
   }
   
   printMST(parent, graph);
}

int main() {
   int graph[V][V] = {
      {0, 2, 0, 6, 0},
      {2, 0, 3, 8, 5},
      {0, 3, 0, 0, 7},
      {6, 8, 0, 0, 9},
      {0, 5, 7, 9, 0}
   };
   
   primMST(graph);
   
   return 0;
}
output:-
Edge    Weight
0 - 1   2
1 - 2   3
0 - 3   6
1 - 4   5

