slip no:-12
Q 1. Implement a Binary search tree (BST) library (btree.h) with operations â€“ create, insert, 
preorder. Write a menu driven program that performs the above operations.

#ifndef BTREE_H
#define BTREE_H

typedef struct node {
    int data;
    struct node* left;
    struct node* right;
} Node;

Node* create_node(int data);
Node* insert(Node* root, int data);
void preorder(Node* root);

#endif

#include <stdio.h>
#include <stdlib.h>
#include "btree.h"

Node* create_node(int data) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}

Node* insert(Node* root, int data) {
    if (root == NULL) {
        root = create_node(data);
    } else if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

void preorder(Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
#include <stdio.h>
#include <stdlib.h>
#include "btree.h"

int main() {
    Node* root = NULL;
    int choice, data;
    do {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Preorder Traversal\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                printf("%d inserted successfully.\n", data);
                break;
            case 2:
                if (root == NULL) {
                    printf("Tree is empty.\n");
                } else {
                    printf("Preorder Traversal: ");
                    preorder(root);
                    printf("\n");
                }
                break;
            case 3:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 3);

    return 0;
}

gcc -c btree.c
gcc -o menu menu.c btree.o
./menu


Q 2. Write a C program for the implementation of Topological sorting.

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

struct Node {
    int vertex;
    struct Node* next;
};

void addEdge(struct Node* adjacencyList[], int src, int dest);
void topologicalSort(struct Node* adjacencyList[], int vertices);
void depthFirstSearch(struct Node* adjacencyList[], int vertex, int visited[], int stack[]);
void printStack(int stack[], int size);

int main() {
    int vertices, edges, i, src, dest;
    struct Node* adjacencyList[MAX_VERTICES] = { NULL };

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for (i = 0; i < edges; i++) {
        printf("Enter the source and destination of edge %d: ", i + 1);
        scanf("%d %d", &src, &dest);
        addEdge(adjacencyList, src, dest);
    }

    printf("Topological sort: ");
    topologicalSort(adjacencyList, vertices);

    return 0;
}

void addEdge(struct Node* adjacencyList[], int src, int dest) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->vertex = dest;
    newNode->next = adjacencyList[src];
    adjacencyList[src] = newNode;
}

void topologicalSort(struct Node* adjacencyList[], int vertices) {
    int visited[MAX_VERTICES], stack[MAX_VERTICES], i;

    for (i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    int index = 0;
    for (i = 0; i < vertices; i++) {
        if (!visited[i]) {
            depthFirstSearch(adjacencyList, i, visited, stack);
        }
    }

    printStack(stack, vertices);
}

void depthFirstSearch(struct Node* adjacencyList[], int vertex, int visited[], int stack[]) {
    visited[vertex] = 1;

    struct Node* temp = adjacencyList[vertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex]) {
            depthFirstSearch(adjacencyList, adjVertex, visited, stack);
        }
        temp = temp->next;
    }

    stack[vertex] = 1;
}

void printStack(int stack[], int size) {
    int i;
    for (i = 0; i < size; i++) {
        if (stack[i]) {
            printf("%d ", i);
        }
    }
}
